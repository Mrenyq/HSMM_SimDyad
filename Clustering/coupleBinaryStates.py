
'''Contains the binary state files for 50 truncations''' 
import numpy as np
from pprint import pprint
import collections
from pylab import *
import operator

couple_types = ["High","Med","Low"]
data_groups = ["All","Cluster1","Cluster2"]
file_dict = {}

file_dict["All"] = {"All": "[200,203,206,208,209,211,212,213,217,225, 202,205,207,210,214,215,218,219,220,228, 201,204,221,222,223,224,226,227,229,230]"}

file_dict["High"] = {"All": "[200,203,206,208,209,211,212,213,217,225]",
                     "Cluster1": "[200,203,206,208,211,212,213]",
                     "Cluster2": "[209,217,225]"}
file_dict["Med"]  = {"All": "[202,205,207,210,214,215,218,219,220,228]",
                     "Cluster1": "[202,214,215,218,220,228]",
                     "Cluster2": "[205,207,210,219]"}
file_dict["Low"]  = {"All": "[201,204,221,222,223,224,226,227,229,230]",
                     "Cluster1": "[201,204,222,223,226,227]",
                     "Cluster2": "[221,224,229,230]"}

'''sorted; high to low within group'''
matHigh  =   [208, 217, 212, 200, 211, 206, 209, 225,213, 203]
matHighGp1 = [208, 212, 200, 211, 206, 213, 203] 
matHighGp2 = [217, 209, 225] 

matMed  =   [228, 205, 202, 214, 207, 218,215, 220, 210, 219]
matMedGp1 = [228, 202, 214, 218, 215, 220]
matMedGp2 = [205, 207, 210, 219]

matLow =   [204, 222, 224, 226,227, 230 , 221, 223, 201, 229 ] #sorted
matLowGp1 = [204, 222, 226, 227, 223, 201]
matLowGp2 = [224, 230, 221, 229]

matAll =  matHigh + matMed + matLow

mat_hi_lo = [208, 217, 212, 200, 211, 206, 209, 225,
             213, 203, 228, 205, 202, 214, 207, 218,
             215, 220, 210, 219, 204, 222, 224, 226,
             227, 230, 221, 223, 201, 229]

mat_hi_loCAT = [208-1, 217-1, 212-1, 200-1, 211-1, 206-1, 209-1, 225-1,
             213-1, 203-1,\
             228-2, 205-2, 202-2, 214-2, 207-2, 218-2,
             215-2, 220-2, 210-2, 219-2, \
             204-3, 222-3, 224-3, 226-3, 227-3, 230-3, 221-3, 223-3, 201-3, 229-3]

ids_byMATLevel = [200,203,206,208,209,211,212,213,217,225,\
                  202,205,207,210,214,215,218,219,220,228,\
                  201,204,221,222,223,224,226,227,229,230]

ids = [200, 201, 202, 203, 204, 205, 206, 207, 208,\
      209, 210, 211, 212, 213, 214, 215, 217, 218, 219,\
      220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230]



'''couples are in numerical order; i.e., ids above'''
states10 = np.array([
[1,1,1,0,1,1,0,1,0,0],
[1,1,1,1,1,1,1,0,0,1],
[1,0,1,0,1,0,0,1,0,0],
[1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,0,0,0,1],
[1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1],
[1,1,1,0,1,1,1,0,1,1],
[1,1,1,1,1,1,1,1,0,1],
[1,1,1,1,1,1,1,1,0,1],
[1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,0,1,0,1],
[1,1,1,1,1,1,1,1,1,1],
[1,0,1,0,1,0,0,1,0,0],
[1,1,1,1,1,1,1,0,1,1],
[1,1,1,1,1,1,1,0,1,1],
[1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,0,0,1],
[1,1,1,1,1,1,1,1,1,1],
[1,1,1,0,1,1,1,0,1,1],
[1,1,0,1,1,1,1,0,1,1],
[1,1,1,0,1,1,1,0,1,1],
[1,1,0,1,1,1,1,0,1,1],
[1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1],
[1,1,1,0,1,1,1,0,1,1],
[1,1,0,0,1,1,0,0,1,1],
[1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,1,1,0,0,1,1],
[1,1,1,1,1,1,1,1,1,1]])
        
states20 = np.array([
[1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,0,1,1,0,0],
[0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,1,0,1,1],
[1,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0],
[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[0,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,0,1,1],
[0,0,1,1,1,1,1,0,1,0,0,1,1,1,0,0,1,0,1,1],
[1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1],
[0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1],
[1,1,0,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1],
[1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1],
[1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1],
[1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0],
[1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1],
[1,0,0,1,1,0,1,0,1,0,0,0,1,1,1,0,1,1,0,0],
[0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,1,0,1,1],
[0,1,1,1,0,1,0,0,1,0,0,1,1,1,0,0,1,0,1,1],
[1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1],
[0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,1],
[0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1],
[0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1],
[0,0,1,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,1],
[0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1],
[0,1,0,1,0,1,0,0,1,0,0,1,0,1,1,0,1,0,1,1],
[0,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,1,1,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[0,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,0,0,1,1],
[0,0,1,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,0],
[0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1],
[0,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,0,1],
[0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1]])

states30 = np.array([
[0,0,1,1,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,0,0],
[0,1,1,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1],
[0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0],
[1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[0,0,1,0,0,1,0,1,0,0,0,1,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,1],
[0,1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1],
[1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,1],
[1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,1,1,1],
[1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1],
[1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1],
[1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1],
[0,1,1,0,1,1,1,1,1,0,0,1,0,0,0,0,1,1,0,1,0,1,1,1,1,1,1,1,0,1],
[1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,0],
[0,1,1,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,1],
[1,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,1,0,1,0,1,1,1,1],
[1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1],
[0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0],
[1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1],
[1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,0,1,1],
[0,0,1,0,1,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1],
[1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,1,1,1],
[1,1,1,0,0,1,0,1,0,1,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,1,0,1,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,0,0,1,1,0,1],
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,0,1,0,0,0,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,0,1],
[0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0],
[1,1,1,0,0,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,0,1,0,0,1,1],
[0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1],
[1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]])

states40 = np.array([
[1,0,0,1,0,1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0],
[1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0],
[1,0,0,1,0,1,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0],
[1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,0,1,1,1,1,1,0,1,1],
[1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
[1,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,0,1],
[1,1,1,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,1,0,0,0,1,1,0,0,0,0,1,1,1],
[1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1],
[1,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,0,1,1,0,0,0,1,0,0,1,1,1,1,1],
[1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0],
[1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
[1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,1,0],
[1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1],
[0,0,0,1,0,1,1,0,1,1,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0],
[1,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1],
[1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0],
[1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1],
[0,0,1,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,1,1,1,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,1],
[1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,0,1,0,1,0,1,1,1,0,0,1,0,1,1,1,0,1,1,0,0,1],
[1,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,1],
[1,0,0,1,0,0,0,1,0,1,0,0,1,1,1,1,1,0,1,1,1,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0,0,1,0,1],
[1,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1],
[1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1],
[1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,0,1],
[1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1],
[1,1,1,1,0,0,0,1,0,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1],
[1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0],
[1,0,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1],
[1,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,1,0],
[1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1]])




mat_hi_lo_str = []
for i in range(len(mat_hi_lo)):
   mat_hi_lo_str.append(str(mat_hi_lo[i]))
   
### 10 #######################################
states10_dict = {}

for each in range(len(ids)):
   for j in states10:
      states10_dict[str(ids[each])]=states10[each]  
      
pprint(states10_dict)   
print
od10 = collections.OrderedDict(sorted(states10_dict.items()))
for k, v in od10.iteritems(): print k, v

print   
hi_loMat10 =[states10_dict[x] for x in mat_hi_lo_str]

print 'Ordered from high to low MAT; 10 states'
for i in range(len(mat_hi_lo)):
   print mat_hi_lo[i],hi_loMat10[i]

array10 = np.array( hi_loMat10 )
#print
#print array10.sum(axis=0)


### 20 #######################################
states20_dict = {}
print    
for each in range(len(ids)):
   for j in states20:
      states20_dict[str(ids[each])]=states20[each]
      
pprint(states20_dict)   
print  
od20 = collections.OrderedDict(sorted(states20_dict.items()))
for k, v in od20.iteritems(): print k, v
   
hi_loMat20 =[states20_dict[x] for x in mat_hi_lo_str]
print
print 'Ordered from high to low MAT; 20 States'
for i in range(len(mat_hi_lo)):
   print mat_hi_lo[i],hi_loMat20[i]
   
array20 = np.array( hi_loMat20 )


### 30 #######################################
states30_dict = {}
   
for each in range(len(ids)):
   for j in states30:
      states30_dict[str(ids[each])]=states30[each]
      
pprint(states30_dict)
print
od30 = collections.OrderedDict(sorted(states30_dict.items()))
for k, v in od30.iteritems(): print k, v
   
hi_loMat30 =[states30_dict[x] for x in mat_hi_lo_str]
print
print 'Ordered from high to low MAT; 30 States'
for i in range(len(mat_hi_lo)):
   print mat_hi_lo[i],hi_loMat30[i]
   
array30 = np.array( hi_loMat30 )

### 40 #######################################
states40_dict = {}
   
for each in range(len(ids)):
   for j in states40:
      states40_dict[str(ids[each])]=states40[each]
      
pprint(states40_dict)    
print 
od40 = collections.OrderedDict(sorted(states40_dict.items()))
for k, v in od40.iteritems(): print k, v
   
hi_loMat40 =[states40_dict[x] for x in mat_hi_lo_str]
print
print 'Ordered from high to low MAT; 40 States'
for i in range(len(mat_hi_lo)):
   print mat_hi_lo[i],hi_loMat40[i]
   
array40 = np.array( hi_loMat40 )  
####################################################

figure(1)
imshow(array10, cmap='bone',interpolation='nearest')
figure(2)
imshow(array20, cmap='bone',interpolation='nearest') 
figure(3)
imshow(array30, cmap='bone',interpolation='nearest')
figure(4)
imshow(array40, cmap='bone',interpolation='nearest')



show()